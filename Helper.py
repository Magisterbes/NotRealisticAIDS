import numpy as np
import IOPart as io


ProbPerSexW =  0.08/100.0
ProbPerSexM =  0.04/100.0
SojournMean = 1*52
LifeTillDeath = 10*52
PartnerSearchDistance = 0.001
SexPerWeek = 2
PartnerChangeMean = [26,52,88,52*4,52*8]
Sincerity = 10/100

BirthRate = 11/(1000*52)

MenAging =  np.array([ 839, 86, 58, 47, 43, 39, 33, 35, 41, 32, 31, 39, 35, 43, 49, 67, 97, 118, 148, 168, 202, 241, 257, 283, 295, 338, 381, 434, 490, 540, 626, 641, 688, 692, 752, 783, 782, 778, 797, 814, 906, 900, 949, 1047, 1073, 1197, 1233, 1292, 1398, 1462, 1641, 1726, 1848, 1930, 2138, 2395, 2485, 2572, 2848, 2916, 3424, 3875, 3511, 4317, 3884, 4343, 4671, 4321, 5618, 5442, 5998, 6777, 6589, 7304, 7846, 8431, 8658, 9403, 10182, 10599, 11047, 11591, 12912, 13513, 14484, 15334, 17155, 17034, 19416, 20608, 22171, 25642, 25576, 27301, 28808, 29668, 31233, 32807, 34384, 35957, 37517, 39059, 40577, 42063, 43513, 44922, 46285, 47599, 48861, 50069, 100000 ])
WomenAging = np.array([ 670, 77, 43, 35, 30, 30, 22, 23, 22, 20, 23, 22, 24, 28, 33, 43, 47, 52, 59, 70, 71, 73, 79, 81, 88, 96, 114, 129, 139, 158, 177, 186, 198, 199, 207, 233, 230, 233, 250, 265, 286, 302, 316, 329, 344, 364, 376, 412, 435, 470, 515, 563, 589, 617, 688, 798, 852, 908, 998, 1074, 1165, 1313, 1223, 1566, 1465, 1670, 1824, 1760, 2253, 2215, 2564, 2983, 3090, 3634, 4050, 4560, 4828, 5540, 6336, 6946, 7783, 8562, 9757, 10581, 11620, 12888, 14532, 15020, 17174, 18272, 20413, 23018, 23792, 24922, 27601, 29388, 31353, 33332, 35311, 37276, 39214, 41111, 42957, 44740, 46453, 48087, 49638, 51101, 52474, 53757, 100000 ])

InitAgeDistMan =  np.array([ 0.00746614481409002, 0.00746301369863014, 0.00748845401174168, 0.00742133072407045, 0.00746555772994129, 0.00749980430528376, 0.00744970645792564, 0.00747397260273973, 0.00746262230919765, 0.0074559686888454, 0.00751624266144814, 0.00747866927592955, 0.00750489236790607, 0.00742700587084149, 0.00742504892367906, 0.00740078277886497, 0.00740450097847358, 0.00742426614481409, 0.00739491193737769, 0.00743365949119374, 0.00738238747553816, 0.0073706457925636, 0.00736888454011742, 0.00732954990215264, 0.00731506849315069, 0.00728767123287671, 0.00723737769080235, 0.00722485322896282, 0.00717123287671233, 0.00712700587084149, 0.00717534246575342, 0.00707240704500979, 0.00701565557729941, 0.00693307240704501, 0.00695068493150685, 0.00690841487279843, 0.00680313111545988, 0.0067866927592955, 0.00666908023483366, 0.00665420743639922, 0.00660508806262231, 0.00646908023483366, 0.00646183953033268, 0.00638336594911937, 0.00635968688845401, 0.00619745596868885, 0.00618219178082192, 0.0060839530332681, 0.00602035225048924, 0.00594911937377691, 0.00581311154598826, 0.00574461839530333, 0.00567005870841487, 0.00557025440313112, 0.00534461839530333, 0.00525225048923679, 0.00508493150684932, 0.00499608610567515, 0.00484833659491194, 0.00470078277886497, 0.00455753424657534, 0.00442954990215264, 0.00421545988258317, 0.00403424657534247, 0.00388101761252446, 0.00376379647749511, 0.00356457925636008, 0.00338023483365949, 0.00321409001956947, 0.00300450097847358, 0.00285557729941292, 0.00262211350293542, 0.00248375733855186, 0.00232876712328767, 0.00209158512720157, 0.00194442270058708, 0.00177436399217221, 0.00161095890410959, 0.00141291585127202, 0.00128904109589041, 0.0011399217221135, 0.00100763209393346, 0.000873776908023483, 0.00076692759295499, 0.000632681017612524, 0.000550684931506849, 0.000452054794520548, 0.000385714285714286, 0.000309197651663405, 0.000233659491193738, 0.000180039138943249, 0.000139334637964775, 0.000102348336594912, 0.0000743639921722114, 0.0000555772994129159, 0.0000373776908023483, 0.00002426614481409, 0.0000181996086105675, 0.0000107632093933464, 6.26223091976517E-06, 4.50097847358121E-06, 2.34833659491194E-06, 1.95694716242661E-06, 9.78473581213307E-07, 5.87084148727984E-07, 0, 0, 0, 0, 0 ])
InitAgeDistWoman = np.array([ 0.0070986301369863, 0.00709295499021526, 0.00704148727984344, 0.00710234833659491, 0.00707690802348337, 0.00704657534246575, 0.00707866927592955, 0.00703972602739726, 0.00703189823874755, 0.00704500978473581, 0.00698904109589041, 0.00701154598825832, 0.00699041095890411, 0.00707318982387476, 0.00707534246575342, 0.00707769080234834, 0.00705283757338552, 0.00704148727984344, 0.00705048923679061, 0.00698962818003914, 0.00702191780821918, 0.00700782778864971, 0.00697514677103718, 0.0070091976516634, 0.00699921722113503, 0.00698904109589041, 0.00696712328767123, 0.00696731898238748, 0.00696712328767123, 0.00697005870841487, 0.00688101761252446, 0.00691428571428571, 0.00691252446183953, 0.00690176125244618, 0.00684207436399217, 0.00682093933463796, 0.00684187866927593, 0.00680039138943249, 0.00683522504892368, 0.00679001956947162, 0.00674050880626223, 0.00681839530332681, 0.00672426614481409, 0.006726614481409, 0.0066866927592955, 0.00668101761252446, 0.00665029354207436, 0.00664579256360078, 0.00657436399217221, 0.00655440313111546, 0.00649686888454012, 0.00646888454011742, 0.00641643835616438, 0.00634011741682975, 0.00638434442270059, 0.00632348336594912, 0.00629432485322896, 0.00619843444227006, 0.00613639921722114, 0.00606947162426614, 0.00599197651663405, 0.00588982387475538, 0.00585675146771037, 0.00579315068493151, 0.00564853228962818, 0.00554794520547945, 0.00547984344422701, 0.0054027397260274, 0.00523953033268102, 0.00521095890410959, 0.00503620352250489, 0.00487651663405088, 0.00470254403131115, 0.00448590998043053, 0.00432681017612524, 0.00412896281800391, 0.00396203522504892, 0.00370469667318982, 0.0034972602739726, 0.00324716242661448, 0.00300117416829746, 0.00274422700587084, 0.00250841487279843, 0.00218199608610567, 0.0019853228962818, 0.00171545988258317, 0.00142994129158513, 0.00123972602739726, 0.00103052837573386, 0.000808610567514677, 0.000656751467710372, 0.000510958904109589, 0.000391780821917808, 0.000290606653620352, 0.000207436399217221, 0.000157925636007828, 0.000105283757338552, 0.0000698630136986301, 0.0000450097847358121, 0.000026027397260274, 0.0000148727984344423, 0.0000105675146771037, 5.28375733855186E-06, 3.91389432485323E-06, 1.56555772994129E-06, 9.78473581213307E-07, 1.95694716242661E-07, 1.95694716242661E-07, 0, 0 ])


def RelLength(Age):
    
    agind = np.floor(Age/(52*5))-3
    leng = 0
    if agind>4:
        agind = 4

    mn = np.random.normal(PartnerChangeMean[int(agind)])

    if agind>=0 and agind <5:
        leng = int(np.abs(np.random.normal(mn,mn)))

    return leng